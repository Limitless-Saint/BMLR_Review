library(gridExtra)
library(knitr)
library(kableExtra)
library(mosaic)
library(xtable)
library(pscl)
library(multcomp)
library(pander)
library(MASS)
library(tidyverse)
help(do)
set.seed(0)
dat <- data.frame(x=(x=runif(10000, 0, 50)),
y=rnorm(10000, 10*x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, flip the axes, add means
## of sections.  Note: densities need to be scaled in relation
## to section size (2000 here)
dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
d <- density(x$res, n=5000)
res <- data.frame(x=max(x$x)- d$y*1000, y=d$x+mean(x$y))
res <- res[order(res$y), ]
## Get some data for normal lines as well
xs <- seq(min(x$res), max(x$res), len=5000)
res <- rbind(res, data.frame(y=xs + mean(x$y),
x=max(x$x) - 1000*dnorm(xs, 0, sd(x$res))))
res$type <- rep(c("empirical", "normal"), each=5000)
res
}))
dens$section <- rep(levels(dat$section), each=10000)
ols_assume <- ggplot(dat, aes(x, y)) +
geom_point(size = 0.1, alpha = .25) +
geom_smooth(method="lm", fill=NA, lwd=2) +
geom_path(data=dens[dens$type=="normal",],
aes(x, y, group=section),
color="salmon", lwd=1.1) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
# Now make Poisson regression picture
set.seed(0)
dat <- data.frame(x=(x=runif(1000, 0, 20)),
y=rpois(1000, exp(.1*x)))
## breaks: where you want to compute densities
breaks <- seq(2, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- dat$y - .1*dat$x
## Compute densities for each section, flip the axes, add means
## of sections.  Note: densities need to be scaled in relation
## to section size
dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
d <- density(x$res, n=500)
res <- data.frame(x=max(x$x)- d$y*10, y=d$x+mean(x$y))
res <- res[order(res$y), ]
## Get some data for poisson lines as well
xs <- seq(min(x$y), max(x$y), len=500)
res <- rbind(res, data.frame(y=xs,
x=max(x$x) - 10*dpois(round(xs), exp(.1*max(x$x)))))
res$type <- rep(c("empirical", "poisson"), each=500)
res
}))
dens$section <- rep(levels(dat$section), each=1000)
pois_assume <- ggplot(dat, aes(x, jitter(y, .25))) +
geom_point(size = 0.1) +
geom_smooth(method="loess", fill=NA, lwd=2) +
geom_path(data=dens[dens$type=="poisson",],
aes(x, y, group=section),
color="salmon", lwd=1.1) +
theme_bw() + ylab("y") + xlab("x") +
geom_vline(xintercept=breaks, lty=2)
grid.arrange(ols_assume, pois_assume, ncol = 2)
help(split)
help(lapply)
fHH1 <- read_delim("fHH1.csv")
fHH1 <- read_delim("C:/Users/Saint/Documents/School_2017_onward/2021-2022/STA303/BMLR_Review_Exercises/fHH1.csv")
View(fHH1)
fHH1 = fHH1 %>% dplyr::select(2:5)
fHH1 <- read_delim("C:/Users/Saint/Documents/School_2017_onward/2021-2022/STA303/BMLR_Review_Exercises/fHH1.csv")
View(fHH1)
fHH1 = fHH1 %>% dplyr::select(2:6)
summarise(fHH1)
summary(fHH1)
var(fHH1$total)
modela = glm(data = fHH1, formula = total ~ age, family = poisson)
summary(modela)
help(cat)
cat(" Residual deviance = ", summary(modela)$deviance, " on ",
summary(modela)$df.residual, "df", "\n",
"Dispersion parameter = ", summary(modela)$dispersion)
library(gridExtra)
library(knitr)
library(kableExtra)
library(mosaic)
library(xtable)
library(pscl)
library(multcomp)
library(pander)
library(MASS)
library(tidyverse)
exp(0.196 - 1.070)
1/exp(0.196 - 1.070)
help(dpois)
sum1 = zip.data %>% summarize(lambda = mean(drinks), maxDrinks = max(drinks))
zip.data = weekendDrinks <- read_csv(file = "C:/Users/Saint/Documents/School_2017_onward/2021-2022/STA303/BMLR_Review/Ch_4/weekendDrinks.csv")
names(zip.data)
dim(zip.data)
sum1 = zip.data %>% summarize(lambda = mean(drinks), maxDrinks = max(drinks))
p
sum1 = zip.data %>% summarize(lambda = mean(drinks), maxDrinks = max(drinks))
View(sum1)
possible.values = with(data = sum1, 0:maxDrinks)
model.prob = with(data = sum1, dpois(x = possible.values, lambda = lambda))
pois.model = data.frame(possible.values, model.prob)
View(pois.model)
possible_robs = 0:50
dens_robs = dpois(x = possible_robs, lambda = 5)
robs.model = tibble('possible_robs' = possible_robs, 'rob_prob' = dens_robs)
View(robs.model)
robs_model = ggplot(data = robs.model, mapping = aes(x = possible_robs, y = rob_prob)) + geom_bar(stat = 'identity') +
labs(x = 'Number of Burglaries', y = 'Probability') + ggtitle('Poisson Model of Burglaries') + coor_cartesian(ylim = c(0, 0.5))
robs_model = ggplot(data = robs.model, mapping = aes(x = possible_robs, y = rob_prob)) + geom_bar(stat = 'identity') +
labs(x = 'Number of Burglaries', y = 'Probability') + ggtitle('Poisson Model of Burglaries') + coord_cartesian(ylim = c(0, 0.5))
robs_model
verify_pois = rpois(n = 40, lambda = 5)
verify_pois
mean(verify_pois)
var(verify_pois)
possible_robs_2 = 0:50
dens_robs_2 = dpois(x = possible_robs_2, lambda = 20)
robs.model_2 = tibble('possible_robs' = possible_robs_2, 'rob_prob' = dens_robs_2)
robs_model = ggplot(data = robs.model_2, mapping = aes(x = possible_robs, y = rob_prob)) + geom_bar(stat = 'identity') +
labs(x = 'Number of Burglaries', y = 'Probability') + ggtitle('Poisson Model of Burglaries') + coord_cartesian(ylim = c(0, 0.5))
robs_model
verify_pois_2 = rpois(n = 40, lambda = 20)
verify_pois_2
mean(verify_pois_2)
var(verify_pois_2)
verify_pois_2 = rpois(n = 100, lambda = 20)
verify_pois_2
mean(verify_pois_2)
var(verify_pois_2)
height_df <- tibble(group = "A",
height = rnorm(30, 170, 10))
height_df %>%
ggplot(aes(x = group, y = height)) +
stat_summary()
plot = height_df %>% ggplot(aes(x = group, y = height)) + stat_summary()
plot$layers
plot2 = height_df %>% ggplot(aes(x = group, y = height)) + geom_point()
plot2$layers
help("geom_pointrange")
?geom_pointrange
help("stat_summary")
mean_se
var
help(var)
x <- rnorm(100)
mean_se(x)
help(data)
data("penguins", package = "palmerpenguins")
my_penguins <- na.omit(penguins)
calc_median_and_color = function(x, threshold = 40) {
tibble(y = median(x)) %>% mutate(fill = ifelse(y < threshold, "pink", "blue"))
}
my_penguins %>% ggplot(mapping = aes(x = species, y = bill_length_mm)) + stat_summary(fun.data = calc_median_and_color,
geom = "bar")
help(map)
help(pull)
help(group_split)
help(map_dfr)
group_split(my_penguins, species) %>% map(~ pull(., var = bill_length_mm)) %>% map_dfr(calc_median_and_color)
help(nrow)
View(my_penguins)
my_penguins %>%  ggplot(mapping = aes(x = species, y = bill_depth_mm)) + stat_summary(fun.data = function(x){
scaled_size = length(x)/nrow(my_penguins)
mean_se(x) %>% mutate(size = scaled_size)}
)
group_split(my_penguins, species) %>% map(~ pull(., var = bill_depth_mm)) %>% map_dfr(function(x){
scaled_size = length(x)/nrow(my_penguins)
mean_se(x) %>% mutate(size = scaled_size)}
)
robs_model
robs_model_beta = ggplot(data = robs.model_2, mapping = aes(x = possible_robs, y = rob_prob)) + geom_col() +
labs(x = 'Number of Burglaries', y = 'Probability') + ggtitle('Poisson Model of Burglaries') + coord_cartesian(ylim = c(0, 0.5))
robs_model_beta
elephants = read_csv(file = "C:/Users/Saint/Documents/School_2017_onward/2021-2022/STA303/BMLR_Review/Ch_4/elephant.csv")
View(elephants)
elephants %>% ggplot(mapping = aes(x = MATINGS, fill = 'blue')) + geom_bar() + labs(x = 'number of matings', y = 'counts')
elephants %>% ggplot(mapping = aes(x = MATINGS, fill = 'Blue')) + geom_bar() + labs(x = 'number of matings', y = 'counts')
help(fill)
elephants %>% ggplot(mapping = aes(x = MATINGS, fill = "blue")) + geom_bar() + labs(x = 'number of matings', y = 'counts')
elephants %>% ggplot(mapping = aes(x = MATINGS)) + geom_bar(fill = "blue") + labs(x = 'number of matings', y = 'counts')
mean_se(elephants$MATINGS)
help(se)
help(sd)
summary_matings = elephants %>% summarise(mean_matings = mean(MATINGS), var_matings = var(MATINGS))
View(summary_matings)
help("geom_smooth")
elephants %>% ggplot(mapping = aes(x = AGE, y = MATINGS)) + geom_point() + geom_smooth(method = "loess", size = 1.5) +
labs(x = "Age", y = "Number of Matings")
helP(stat_summary())
helP(stat_summary)
help(stat_summary)
mean_mate_by_age = elephants %>% group_by(AGE, .groups = 'drop') %>%  summarize(mean = mean(AGE), log_age = log(mean))
View(mean_mate_by_age)
mean_mate_by_age = elephants %>% group_by(AGE, .groups = 'drop') %>%  summarize(mean = mean(MATINGS), log_matings = log(mean))
log_mean_age_plot = elephants %>% ggplot(mapping = aes(x = AGE, y = log_matings)) + geom_smooth(method = 'loess', linewidth = 1.5) +
labs(x = "Age", y "Number of matings")
log_mean_age_plot = elephants %>% ggplot(mapping = aes(x = AGE, y = log_matings)) + geom_smooth(method = 'loess', linewidth = 1.5) +
labs(x = "Age", y = "Number of matings")
log_mean_age_plot = elephants %>% ggplot(mapping = aes(x = AGE, y = log_matings)) + geom_smooth(method = 'loess', linewidth = 1.5) +
labs(x = "Age", y = "Number of matings_Logged")
log_mean_mate_plot = elephants %>% ggplot(mapping = aes(x = AGE, y = log_matings)) + geom_smooth(method = 'loess', linewidth = 1.5) +
labs(x = "Age", y = "Number of matings_Logged")
log_mean_mate_plot
mean_mate_by_age = elephants %>% group_by(AGE, .groups = 'drop') %>%  summarize(mean = mean(MATINGS), log_matings = log(mean))
log_mean_mate_plot = elephants %>% ggplot(mapping = aes(x = AGE, y = log_matings)) + geom_smooth(method = 'loess', linewidth = 1.5) +
labs(x = "Age", y = "Number of matings_Logged")
log_mean_mate_plot
View(log_mean_mate_plot)
View(mean_mate_by_age)
mean_mate_by_age_clean = mean_mate_by_age %>% filter(log_matings != -Inf)
View(mean_mate_by_age_clean)
log_mean_mate_plot = mean_mate_by_age %>% ggplot(mapping = aes(x = AGE, y = log_matings)) + geom_smooth(method = 'loess', linewidth = 1.5) +
labs(x = "Age", y = "Number of matings_Logged")
log_mean_mate_plot
log_mean_mate_plot = mean_mate_by_age %>% ggplot(mapping = aes(x = AGE, y = log_matings)) + geom_point() +
geom_smooth(method = 'loess', linewidth = 1.5) + labs(x = "Age", y = "Number of matings_Logged")
log_mean_mate_plot
log_mean_age_func = function(x){
tibble(y = log(mean(x)))
}
elephants %>% ggplot(mapping = aes(x = AGE, y = MATINGS)) + geom_point() +
stat_summary(fun.data = log_mean_age_func, geom = 'smooth', fun.args = list(method = 'loess'))
elephants %>% ggplot(mapping = aes(x = AGE, y = MATINGS)) + geom_point() +
stat_summary(fun.data = log_mean_age_func, geom = 'smooth')
regress_elep_1 = glm(data = elephants, formula = MATINGS ~ AGE, family = poisson)
summary(regress_elep_1)
exp(coef(regress_elep_1))
confint(exp(coef(regress_elep_1)))
exp(confint(coef(regress_elep_1)))
confint(coef(regress_elep_1))
exp(confint(regress_elep_1))
install.packages("aod")
library(aod) #to be able to perform wald test outside of summary()
wald.test(Sigma = vcov(regress_elep_1), b = coef(regress_elep_1), Terms = 2)
help(wald.test)
null_model_elep = glm(data = elephants, formula = MATINGS ~ 1, family = poisson)
null_model_elep = glm(data = elephants, formula = MATINGS ~ 1, family = poisson)
drop_in_dev_elep = anova(null_model_elep, regress_elep_1, test = 'Chisq')
drop_in_dev_elep
help("group_vars")
by_species <- starwars %>% group_by(species)
by_species
View(by_species)
View(starwars)
by_species %>% tally(sort = TRUE)
elephants = elephants %>% mutate(AGE2 = AGE^2)
View(elephants)
regress_elep_2 = glm(data = elephants, formula = MATINGS ~ AGE + AGE2, family = poisson)
summary(regress_elep_2)
drop_in_dev_elep2 = anova(regress_elep_1, regress_elep_2, test = 'Chisq')
drop_in_dev_elep2
help(pchisq)
1 - pchisq(q = regress_elep_1$deviance, df = regress_elep_1$df.residual) #GOF test
View(mean_mate_by_age_clean)
mean_mate_by_age = elephants %>% group_by(AGE, .groups = 'drop') %>%  summarize(mean = mean(MATINGS), var = var(MATINGS),
log_matings = log(mean))
mean_mate_by_age = elephants %>% group_by(AGE) %>%  summarize(mean = mean(MATINGS), var = var(MATINGS),
log_matings = log(mean))
rm(mean_mate_by_age_clean)
help(n)
counts_by_AGE = elephants %>%  group_by(AGE) %>%  summarise(n = n())
View(counts_by_AGE)
regress_elep_od = glm(data = elephants, formula = MATINGS ~ AGE, family = quasipoisson)
coef(regress_elep_1)
coef(regress_elep_od)
summary(regress_elep_od)
summary(regress_elep_1)
drop_in_dev_od = anova(regress_elep_od, regress_elep_1, test = 'F')
drop_in_dev_od
